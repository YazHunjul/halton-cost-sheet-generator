"""
Main Streamlit application for the HVAC Project Management Tool.
"""
import streamlit as st
from components.forms import general_project_form
from components.project_forms import project_structure_form
from config.constants import SessionKeys, PROJECT_TYPES
from utils.excel import read_excel_project_data
from utils.word import generate_quotation_document
import os

def display_project_summary(project_data: dict):
    """Display a formatted summary of the project data."""
    st.header("üìã Project Summary")
    
    # General Information
    st.subheader("General Information")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Project Name:**", project_data.get("project_name"))
        st.write("**Project Number:**", project_data.get("project_number"))
        st.write("**Date:**", project_data.get("date"))
        st.write("**Customer:**", project_data.get("customer"))
        st.write("**Company:**", project_data.get("company"))
    
    with col2:
        st.write("**Location:**", project_data.get("location"))
        st.write("**Address:**", project_data.get("address"))
        st.write("**Sales Contact:**", project_data.get("sales_contact"))
        st.write("**Estimator:**", project_data.get("estimator"))
        st.write("**Cost Sheet:**", project_data.get("cost_sheet") or "Not specified")
    
    # Project Structure
    if "levels" in project_data:
        st.markdown("---")
        st.subheader("Project Structure")
        
        for level in project_data["levels"]:
            with st.expander(f"Level {level['level_number']}", expanded=True):
                for area in level["areas"]:
                    st.markdown(f"### üìç Area: {area['name']}")
                    
                    if area["canopies"]:
                        for i, canopy in enumerate(area["canopies"], 1):
                            st.markdown(f"#### üîπ Canopy {i}")
                            
                            # Basic Info
                            col1, col2 = st.columns(2)
                            with col1:
                                st.write("**Reference Number:**", canopy["reference_number"])
                                st.write("**Model:**", canopy["model"])
                                st.write("**Configuration:**", canopy["configuration"])
                            
                            # Wall Cladding
                            if canopy["wall_cladding"]["type"] != "None":
                                with col2:
                                    st.markdown("**Wall Cladding:**")
                                    st.write("- Type:", canopy["wall_cladding"]["type"])
                                    st.write("- Width:", f"{canopy['wall_cladding']['width']}mm")
                                    st.write("- Height:", f"{canopy['wall_cladding']['height']}mm")
                                    # Handle position as a list
                                    position = canopy["wall_cladding"]["position"]
                                    if isinstance(position, list):
                                        position_str = ", ".join(position) if position else "None"
                                    else:
                                        position_str = position if position else "None"
                                    st.write("- Position:", position_str)
                            
                            # Options
                            st.markdown("**Options:**")
                            opt_col1, opt_col2 = st.columns(2)
                            with opt_col1:
                                st.write("‚úì Fire Suppression" if canopy["options"]["fire_suppression"] else "‚úó Fire Suppression")
                                st.write("‚úì UV-C System" if canopy["options"]["uvc"] else "‚úó UV-C System")
                            with opt_col2:
                                st.write("‚úì SDU" if canopy["options"]["sdu"] else "‚úó SDU")
                                st.write("‚úì RecoAir" if canopy["options"]["recoair"] else "‚úó RecoAir")
                            
                            st.markdown("---")
                    else:
                        st.write("No canopies in this area")
                    
                    st.markdown("---")

def word_generation_page():
    """Page for generating Word documents from Excel files."""
    st.header("üìÑ Generate Word Quotation")
    st.markdown("Upload an Excel cost sheet to generate a Word quotation document.")
    
    uploaded_file = st.file_uploader(
        "Choose Excel file",
        type=['xlsx', 'xls'],
        help="Upload a cost sheet Excel file generated by this application"
    )
    
    if uploaded_file is not None:
        try:
            # Save uploaded file temporarily
            temp_path = f"temp_excel_{uploaded_file.name}"
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # Read project data from Excel
            with st.spinner("Reading project data from Excel..."):
                project_data = read_excel_project_data(temp_path)
            
            # Display summary of extracted data
            st.success("‚úÖ Successfully extracted project data from Excel!")
            
            with st.expander("üìã Extracted Project Data", expanded=False):
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**Project Name:**", project_data.get("project_name"))
                    st.write("**Project Number:**", project_data.get("project_number"))
                    st.write("**Customer:**", project_data.get("customer"))
                    st.write("**Date:**", project_data.get("date"))
                
                with col2:
                    st.write("**Location:**", project_data.get("location"))
                    st.write("**Estimator:**", project_data.get("estimator"))
                    st.write("**Levels Found:**", len(project_data.get("levels", [])))
            
            # Generate Word document
            if st.button("üìÑ Generate Word Quotation", type="primary"):
                try:
                    with st.spinner("Generating Word quotation document..."):
                        word_path = generate_quotation_document(project_data)
                    
                    st.success("‚úÖ Word quotation document generated successfully!")
                    
                    # Provide download button
                    with open(word_path, "rb") as file:
                        st.download_button(
                            label="üì• Download Word Quotation",
                            data=file.read(),
                            file_name=f"quotation_{project_data.get('project_number', 'unknown')}.docx",
                            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                
                except Exception as e:
                    st.error(f"‚ùå Error generating Word document: {str(e)}")
            
            # Clean up temp file
            if os.path.exists(temp_path):
                os.remove(temp_path)
                
        except Exception as e:
            st.error(f"‚ùå Error reading Excel file: {str(e)}")
            if os.path.exists(temp_path):
                os.remove(temp_path)

def initialize_session_state():
    """Initialize all session state variables if they don't exist."""
    if SessionKeys.PROJECT_DATA not in st.session_state:
        st.session_state[SessionKeys.PROJECT_DATA] = {}
    
    if SessionKeys.CURRENT_STEP not in st.session_state:
        st.session_state[SessionKeys.CURRENT_STEP] = 1
        
    if SessionKeys.PROJECT_TYPE not in st.session_state:
        st.session_state[SessionKeys.PROJECT_TYPE] = None

def navigation_buttons():
    """Render navigation buttons based on current step."""
    cols = st.columns([1, 1, 1])
    
    with cols[0]:
        if st.session_state[SessionKeys.CURRENT_STEP] > 1:
            if st.button("‚¨ÖÔ∏è Go Back", use_container_width=True):
                st.session_state[SessionKeys.CURRENT_STEP] -= 1
                # Don't rerun here, let the main flow handle it

def main():
    # Set page config
    st.set_page_config(
        page_title="HVAC Project Management Tool",
        page_icon="üè¢",
        layout="wide"
    )
    
    # Initialize session state
    initialize_session_state()
    
    # Sidebar for navigation
    with st.sidebar:
        st.title("Navigation")
        page = st.radio("Choose a page:", ["Create New Project", "Generate Word Document"])
        
        st.markdown("---")
        st.subheader("Debug Info")
        st.write("Current Step:", st.session_state[SessionKeys.CURRENT_STEP])
        st.write("Project Type:", st.session_state[SessionKeys.PROJECT_TYPE])
        if st.button("Start Over"):
            # Clear all session state except the current page
            for key in st.session_state.keys():
                if key != "pages_initialized":  # Streamlit internal state
                    del st.session_state[key]
            initialize_session_state()
            st.rerun()
    
    # Header
    st.title("HVAC Project Management Tool")
    st.markdown("---")
    
    if page == "Generate Word Document":
        word_generation_page()
        return
    
    # Project Type Selection
    if st.session_state[SessionKeys.PROJECT_TYPE] is None:
        st.info("Please select a project type to begin")
        project_type = st.selectbox(
            "Select Project Type *",
            options=PROJECT_TYPES,
            index=None,
            help="Choose the type of project you're creating"
        )
        
        if project_type:
            st.session_state[SessionKeys.PROJECT_TYPE] = project_type
            # Store project type in project data
            st.session_state[SessionKeys.PROJECT_DATA]["project_type"] = project_type
            st.rerun()
    
    # Show current project type
    st.info(f"Project Type: {st.session_state[SessionKeys.PROJECT_TYPE]}")
    
    # Navigation buttons
    navigation_buttons()
    
    # Step 1: General Project Information
    if st.session_state[SessionKeys.CURRENT_STEP] == 1:
        st.header("Step 1: General Project Information")
        project_data = general_project_form()
        
        if project_data:
            # Ensure project type is preserved
            project_data["project_type"] = st.session_state[SessionKeys.PROJECT_TYPE]
            st.session_state[SessionKeys.PROJECT_DATA].update(project_data)
            st.success("Project information saved!")
            st.session_state[SessionKeys.CURRENT_STEP] = 2
            st.rerun()
    
    # Step 2: Project Structure
    elif st.session_state[SessionKeys.CURRENT_STEP] == 2:
        # Show Step 1 data in expander
        with st.expander("Step 1: Project Information", expanded=False):
            st.json(st.session_state[SessionKeys.PROJECT_DATA])
        
        st.header("Step 2: Project Structure")
        
        # Get any existing structure data
        existing_structure = st.session_state[SessionKeys.PROJECT_DATA].get("levels", None)
        if existing_structure:
            st.success("Project structure data exists. You can modify it below.")
        
        levels_data = project_structure_form()
        
        # Only update and proceed if Save button was clicked
        if levels_data and st.session_state.get("save_clicked", False):
            st.session_state[SessionKeys.PROJECT_DATA]["levels"] = levels_data
            st.success("Project structure saved successfully!")
            st.session_state[SessionKeys.CURRENT_STEP] = 3
            # Clear the save flag
            st.session_state.save_clicked = False
            st.rerun()
    
    # Step 3: Review
    elif st.session_state[SessionKeys.CURRENT_STEP] == 3:
        display_project_summary(st.session_state[SessionKeys.PROJECT_DATA])
        
        st.markdown("---")
        st.subheader("üìä Generate Cost Sheet")
        
        if st.button("Generate Excel Cost Sheet", type="primary"):
            try:
                from utils.excel import save_to_excel
                
                # Ensure project type is set
                if "project_type" not in st.session_state[SessionKeys.PROJECT_DATA]:
                    st.session_state[SessionKeys.PROJECT_DATA]["project_type"] = st.session_state[SessionKeys.PROJECT_TYPE]
                
                with st.spinner("Generating Excel cost sheet..."):
                    output_path = save_to_excel(st.session_state[SessionKeys.PROJECT_DATA])
                    
                    # Read the file for download
                    with open(output_path, "rb") as file:
                        excel_data = file.read()
                    
                    st.success("Cost sheet generated successfully!")
                    st.download_button(
                        label="üì• Download Cost Sheet",
                        data=excel_data,
                        file_name=os.path.basename(output_path),
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
            except Exception as e:
                st.error(f"Error generating cost sheet: {str(e)}")
                st.error("Please ensure all required data is filled in correctly.")

if __name__ == "__main__":
    main() 